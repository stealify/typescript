# This workflow will do a clean install of node dependencies, build the source code and run tests across different versions of node
# For more information see: https://help.github.com/actions/language-and-framework-guides/using-nodejs-with-github-actions

name: Node.js CI

on:
  push:
    branches: [ 4.1.0 ]
  pull_request:
    branches: [ 4.1.0 ]

jobs:
  build:

    runs-on: ubuntu-latest

    strategy:
      matrix:
        node-version: [14.x]

    steps:
    - uses: actions/checkout@v2
    - name: check remote updates
      id: commit
      run: |
       export TS_COMMIT=$(git rev-parse --short $(curl --silent https://api.github.com/repos/oracle/graal/commits/master | jq .sha | xargs))
       echo $TS_COMMIT
       echo "::set-output name=hash::$TS_COMMIT"
    - name: Cache Last Processed Commit.
      id: cache
      uses: actions/cache@v2.1.1
      with:
        # A list of files, directories, and wildcard patterns to cache and restore
        path: built
        key: ${{ steps.commit.outputs.hash }}
    - name: Use Node.js ${{ matrix.node-version }}
      if: steps.cache.outputs.cache-hit != 'true'
      id: typescript
      uses: actions/setup-node@v1
      with:
        node-version: ${{ matrix.node-version }}
    - run: wget https://patch-diff.githubusercontent.com/raw/microsoft/TypeScript/pull/40068.patch
    - run: wget https://github.com/microsoft/TypeScript/archive/master.tar.gz
    - run: |
        git config --global user.email "frank@dspeed.eu"
        git config --global user.name "Frank Lemanschik"
        tar xf master.tar.gz
        cd TypeScript-master
        git init
        git add src
        git commit -am "${{ steps.commit.outputs.hash }}"
        git apply ../40068.patch
        git commit -am "Patched: "
        npm install gulp fancy-log gulp-newer gulp-sourcemaps
        npm install
        npm run build:compiler
        export TS_VERSION=$(cat package.json | jq .version | xargs)
        export TS_NAME=TypeScript-$TS_VERSION-${{ steps.commit.outputs.hash }}
        echo "::set-output name=version::$TS_VERSION"
        echo "::set-output name=name::$TS_NAME"
        cd built
        mv local $TS_NAME
        tar cvf - $TS_NAME | gzip -9 - > ../$TS_NAME.tar.gz
    - name: Create Release
      if: steps.cache.outputs.cache-hit != 'true'
      id: create_release
      uses: actions/create-release@v1
      env:
         GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
      with:
         tag_name: ${{ steps.typescript.outputs.version }}-${{ steps.commit.outputs.hash }}
         release_name: Release ${{ steps.typescript.outputs.name }}
         draft: false
         prerelease: true
    - name: Upload TypeScript
      if: steps.cache.outputs.cache-hit != 'true'
      id: upload
      uses: actions/upload-release-asset@v1
      env:
         GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
      with:
         upload_url: ${{ steps.create_release.outputs.upload_url }} # This pulls from the CREATE RELEASE step above, referencing it's ID to get its outputs object, which include a `upload_url`. See this blog post for more info: https://jasonet.co/posts/new-features-of-github-actions/#passing-data-to-future-steps 
         asset_path: ./${{ steps.typescript.outputs.name }}.tar.gz
         asset_name: ${{ steps.typescript.outputs.name }}.tar.gz
         asset_content_type: application/gzip
